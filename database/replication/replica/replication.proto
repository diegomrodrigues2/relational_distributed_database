// Definicoes de mensagens e servico para replicacao via gRPC
// As mensagens sao simples para facilitar o entendimento.

syntax = "proto3";
package replication;

// Requisicao contendo apenas a chave da operacao
message KeyRequest {
  string key = 1;
  int64 timestamp = 2;
  string node_id = 3;
  string op_id = 4;
  VersionVector vector = 5;
  string hinted_for = 6;
  repeated string in_progress = 7;
  string tx_id = 8;
}

// Estrutura para enviar chave e valor de uma escrita
message KeyValue {
  string key = 1;
  string value = 2;
  int64 timestamp = 3;
  string node_id = 4;
  string op_id = 5;
  VersionVector vector = 6;
  string hinted_for = 7;
  string tx_id = 8;
}

// Request for an atomic increment operation
message IncrementRequest {
  string key = 1;
  int64 amount = 2;
}

// Request for an atomic transfer between two keys
message TransferRequest {
  string from_key = 1;
  string to_key = 2;
  int64 amount = 3;
}

// Request containing a DDL statement to execute
message DdlRequest {
  string ddl = 1;
}

// Resposta que devolve um valor, vazio caso nao encontrado
// Representa um valor versionado
message VersionedValue {
  string value = 1;
  int64 timestamp = 2;
  VersionVector vector = 3;
}

// Resposta que devolve todos os valores encontrados
message ValueResponse {
  repeated VersionedValue values = 1;
}

// Request for a range scan within a partition
message RangeRequest {
  string partition_key = 1;
  string start_ck = 2;
  string end_ck = 3;
}

// Item returned when scanning a range
message RangeItem {
  string clustering_key = 1;
  string value = 2;
  int64 timestamp = 3;
  VersionVector vector = 4;
}

// Response with ordered items for a range scan
message RangeResponse {
  repeated RangeItem items = 1;
}

// Mensagem vazia usada em operacoes sem retorno
message Empty {}

// Mensagem simples para o mecanismo de heartbeat
message Heartbeat {
  string node_id = 1;
}

// Transaction identifier
message TransactionId {
  string id = 1;
  repeated string in_progress = 2;
}

// Control message referencing a transaction
message TransactionControl {
  string tx_id = 1;
}

// List of currently active transaction IDs
message TransactionList {
  repeated string tx_ids = 1;
}

// Vetor de versões enviado ao requisitar atualizações
message VersionVector {
  map<string, int64> items = 1;
}

// Mapear id da partição para o node owner
message PartitionMap {
  map<int32, string> items = 1;
}

// Serialized representation of the hash ring
message HashRingEntry {
  string hash = 1;
  string node_id = 2;
}

// List of hash ring entries
message HashRing {
  repeated HashRingEntry items = 1;
}

// Node in a Merkle tree
message MerkleNodeMsg {
  string key = 1;
  string hash = 2;
  MerkleNodeMsg left = 3;
  MerkleNodeMsg right = 4;
}

// Tree for a database segment
message SegmentTree {
  string segment = 1;
  MerkleNodeMsg root = 2;
}

// Representa uma operação pendente de replicação
message Operation {
  string key = 1;
  string value = 2;
  int64 timestamp = 3;
  string node_id = 4;
  string op_id = 5;
  bool delete = 6;
  VersionVector vector = 7;
}

// Requisição para anti-entropy permitindo enviar várias operações
message FetchRequest {
  VersionVector vector = 1;
  repeated Operation ops = 2;
  map<string, string> segment_hashes = 3;
  repeated SegmentTree trees = 4;
}

// Lista de operações para sincronização
message FetchResponse {
  repeated Operation ops = 1;
  map<string, string> segment_hashes = 2;
}

// Query for a secondary index
message IndexQuery {
  string field = 1;
  string value = 2;
}

// List of keys returned by index queries
message KeyList {
  repeated string keys = 1;
}

// Request for information about a node
message NodeInfoRequest {
  string node_id = 1;
  string status = 2;
  double cpu = 3;
  double memory = 4;
  double disk = 5;
  int64 uptime = 6;
  int32 replication_log_size = 7;
  int32 hints_count = 8;
}

// Reply with information about a node
message NodeInfoResponse {
  string node_id = 1;
  string status = 2;
  double cpu = 3;
  double memory = 4;
  double disk = 5;
  int64 uptime = 6;
  int32 replication_log_size = 7;
  int32 hints_count = 8;
}

// Map of replication state per node
message ReplicationStatusResponse {
  map<string,int64> last_seen = 1;
  map<string,int32> hints = 2;
}

// Entry stored in the Write Ahead Log
message WalEntry {
  string type = 1;
  string key = 2;
  string value = 3;
  VersionVector vector = 4;
}

// Response with WAL entries
message WalEntriesResponse {
  repeated WalEntry entries = 1;
}

// Generic storage entry used for MemTable and SSTables
message StorageEntry {
  string key = 1;
  string value = 2;
  VersionVector vector = 3;
}

// Response containing storage entries
message StorageEntriesResponse {
  repeated StorageEntry entries = 1;
}

// Information about a SSTable on disk
message SSTableInfo {
  string id = 1;
  int32 level = 2;
  int64 size = 3;
  int32 item_count = 4;
  string start_key = 5;
  string end_key = 6;
}

// Response listing available SSTables
message SSTableInfoResponse {
  repeated SSTableInfo tables = 1;
}

// Request content of a specific SSTable
message SSTableContentRequest {
  string node_id = 1;
  string sstable_id = 2;
}

// Servico disponibilizado por cada seguidor
service Replica {
  rpc Put(KeyValue) returns (Empty);
  rpc Delete(KeyRequest) returns (Empty);
  rpc Get(KeyRequest) returns (ValueResponse);
  // Get value acquiring a lock similar to SELECT FOR UPDATE
  rpc GetForUpdate(KeyRequest) returns (ValueResponse);
  rpc Increment(IncrementRequest) returns (Empty);
  rpc Transfer(TransferRequest) returns (Empty);
  rpc ExecuteDDL(DdlRequest) returns (Empty);
  rpc BeginTransaction(Empty) returns (TransactionId);
  // Apply all buffered operations of a transaction
  rpc CommitTransaction(TransactionControl) returns (Empty);
  // Discard any pending operations of a transaction
  rpc AbortTransaction(TransactionControl) returns (Empty);
  rpc ListTransactions(Empty) returns (TransactionList);
  rpc ScanRange(RangeRequest) returns (RangeResponse);
  rpc FetchUpdates(FetchRequest) returns (FetchResponse);
  rpc UpdatePartitionMap(PartitionMap) returns (Empty);
  rpc UpdateHashRing(HashRing) returns (Empty);
  rpc ListByIndex(IndexQuery) returns (KeyList);
  rpc GetNodeInfo(NodeInfoRequest) returns (NodeInfoResponse);
  rpc GetReplicationStatus(NodeInfoRequest) returns (ReplicationStatusResponse);
  rpc GetWalEntries(NodeInfoRequest) returns (WalEntriesResponse);
  rpc GetMemtableEntries(NodeInfoRequest) returns (StorageEntriesResponse);
  rpc GetSSTables(NodeInfoRequest) returns (SSTableInfoResponse);
  rpc GetSSTableContent(SSTableContentRequest) returns (StorageEntriesResponse);
}

// Servico dedicado para heartbeat
service HeartbeatService {
  rpc Ping(Heartbeat) returns (Empty);
}
